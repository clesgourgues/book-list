"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _graphqlCompose = require("graphql-compose");

class ObjectParser {
  static createTC(name, json) {
    if (!json || typeof json !== 'object') {
      throw new Error('You provide empty object in second arg for `createTC` method.');
    }

    const tc = _graphqlCompose.TypeComposer.create(name);

    const fields = {};
    Object.keys(json).forEach(k => {
      fields[k] = this.getFieldConfig(json[k], {
        typeName: name,
        fieldName: k
      });
    });
    tc.setFields(fields);
    return tc;
  }

  static getFieldConfig(value, opts) {
    const typeOf = typeof value;
    if (typeOf === 'number') return 'Float';
    if (typeOf === 'string') return 'String';
    if (typeOf === 'boolean') return 'Boolean';

    if (typeOf === 'object') {
      if (value === null) return 'JSON';

      if (Array.isArray(value)) {
        const val = value[0];
        if (Array.isArray(val)) return ['JSON'];
        return [this.getFieldConfig(val)];
      }

      if (opts && opts.typeName && opts.fieldName) {
        return this.createTC(`${opts.typeName}_${(0, _graphqlCompose.upperFirst)(opts.fieldName)}`, value);
      }
    }

    if (typeOf === 'function') {
      return value;
    }

    return 'JSON';
  }

}

exports.default = ObjectParser;