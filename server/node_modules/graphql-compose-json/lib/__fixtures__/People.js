"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PeopleTC = void 0;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _index = require("../index");

var _Film = require("./Film");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const restApiResponse = {
  name: 'Luke Skywalker',
  height: '172',
  mass: '77',
  hair_color: 'blond',
  skin_color: 'fair',
  eye_color: 'blue',
  birth_year: '19BBY',
  gender: 'male',
  films: ['https://swapi.co/api/films/2/', 'https://swapi.co/api/films/6/', 'https://swapi.co/api/films/3/']
};
const PeopleTC = (0, _index.composeWithJson)('People', restApiResponse); // //////////////
// RESOLVERS aka FieldConfig in GraphQL
// //////////////

exports.PeopleTC = PeopleTC;
PeopleTC.addResolver({
  name: 'findById',
  type: PeopleTC,
  args: {
    id: 'Int!'
  },
  resolve: rp => {
    return (0, _nodeFetch.default)(`https://swapi.co/api/people/${rp.args.id}/`).then(r => r.json());
  }
});
PeopleTC.addResolver({
  name: 'findByUrl',
  type: PeopleTC,
  args: {
    url: 'String!'
  },
  resolve: rp => (0, _nodeFetch.default)(rp.args.url).then(r => r.json())
});
PeopleTC.addResolver({
  name: 'findByUrlList',
  type: [PeopleTC],
  args: {
    urls: '[String]!'
  },
  resolve: rp => {
    return Promise.all(rp.args.urls.map(url => (0, _nodeFetch.default)(url).then(r => r.json())));
  }
}); // //////////////
// RELATIONS
// //////////////

PeopleTC.addRelation('filmObjs', {
  resolver: () => _Film.FilmTC.getResolver('findByUrlList'),
  prepareArgs: {
    urls: source => source.films
  }
});