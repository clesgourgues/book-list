"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilmTC = void 0;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _index = require("../index");

var _People = require("./People");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const restApiResponse = {
  title: 'The Empire Strikes Back',
  episode_id: 5,
  opening_crawl: 'It is a dark time for ...',
  director: 'Irvin Kershner',
  producer: 'Gary Kurtz, Rick McCallum',
  release_date: '1980-05-17',
  characters: ['https://swapi.co/api/people/1/', 'https://swapi.co/api/people/2/', 'https://swapi.co/api/people/3/']
};
const FilmTC = (0, _index.composeWithJson)('Film', restApiResponse); // //////////////
// RESOLVERS aka FieldConfig in GraphQL
// //////////////

exports.FilmTC = FilmTC;
FilmTC.addResolver({
  name: 'findById',
  type: FilmTC,
  args: {
    id: 'Int!'
  },
  resolve: rp => {
    return (0, _nodeFetch.default)(`https://swapi.co/api/films/${rp.args.id}/`).then(r => r.json());
  }
});
FilmTC.addResolver({
  name: 'findByUrl',
  type: FilmTC,
  args: {
    url: 'String!'
  },
  resolve: rp => (0, _nodeFetch.default)(rp.args.url).then(r => r.json())
});
FilmTC.addResolver({
  name: 'findByUrlList',
  type: [FilmTC],
  args: {
    urls: '[String]!'
  },
  resolve: rp => {
    return Promise.all(rp.args.urls.map(url => (0, _nodeFetch.default)(url).then(r => r.json())));
  }
}); // //////////////
// RELATIONS
// //////////////

FilmTC.addRelation('characters', {
  resolver: () => _People.PeopleTC.getResolver('findByUrlList'),
  prepareArgs: {
    urls: source => source.characters
  }
});
FilmTC.addFields({
  currentTime: {
    type: 'String',
    resolve: () => Date.now()
  }
});