"use strict";

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _graphqlCompose = require("graphql-compose");

var _Schema = _interopRequireDefault(require("../__fixtures__/Schema"));

var _People = require("../__fixtures__/People");

var _index = require("../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const GraphQLSchema = _graphqlCompose.graphql.GraphQLSchema,
      GraphQLObjectType = _graphqlCompose.graphql.GraphQLObjectType;
jasmine.DEFAULT_TIMEOUT_INTERVAL = 60000;
describe('composeWithJson', () => {
  it('request film by id',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const res = yield _graphqlCompose.graphql.graphql(_Schema.default, `{
        film(id: 1) {
          title
          episode_id
        }
      }`);
    expect(res).toEqual({
      data: {
        film: {
          title: 'A New Hope',
          episode_id: 4
        }
      }
    });
  }));
  it('request people with films',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const res = yield _graphqlCompose.graphql.graphql(_Schema.default, `{
        people(id: 1) {
          name
          films
          filmObjs {
            title
          }
        }
      }`);
    expect(res).toEqual({
      data: {
        people: {
          name: 'Luke Skywalker',
          filmObjs: [{
            title: 'The Empire Strikes Back'
          }, {
            title: 'Revenge of the Sith'
          }, {
            title: 'Return of the Jedi'
          }, {
            title: 'A New Hope'
          }, {
            title: 'The Force Awakens'
          }],
          films: ['https://swapi.co/api/films/2/', 'https://swapi.co/api/films/6/', 'https://swapi.co/api/films/3/', 'https://swapi.co/api/films/1/', 'https://swapi.co/api/films/7/']
        }
      }
    });
  }));
  it('allow set field config via function',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const restApiResponse = {
      title: 'A New Hope',
      episode_id: 4,
      opening_crawl: 'It is a period of civil war of ... freedom to the galaxy....',
      director: 'George Lucas',
      producer: 'Gary Kurtz, Rick McCallum',
      release_date: '1977-05-25',
      // planets: [
      //   'https://swapi.co/api/planets/2/',
      //   'https://swapi.co/api/planets/3/',
      //   'https://swapi.co/api/planets/1/'
      // ],
      planets: () => ({
        type: 'Int',
        resolve: source => source.planets.length
      }),
      // characters: [
      //   'https://swapi.co/api/people/1/',
      //   'https://swapi.co/api/people/2/',
      //   'https://swapi.co/api/people/3/',
      // ],
      characters: () => _People.PeopleTC.getResolver('findByUrlList').wrapResolve(next => rp => {
        const characterUrls = rp.source.characters;
        rp.args.urls = characterUrls; // eslint-disable-line

        return next(rp);
      }).removeArg('urls')
    };
    const FilmTC = (0, _index.composeWithJson)('FilmCustom', restApiResponse);
    const schema1 = new GraphQLSchema({
      query: new GraphQLObjectType({
        name: 'Query',
        fields: {
          film: {
            type: FilmTC.getType(),
            resolve: () => {
              return (0, _nodeFetch.default)(`https://swapi.co/api/films/1`).then(r => r.json());
            }
          }
        }
      })
    });
    const res = yield _graphqlCompose.graphql.graphql(schema1, `{
        film {
          title
          planets
          characters {
            name
          }
        }
      }`);
    expect(res).toEqual({
      data: {
        film: {
          title: 'A New Hope',
          planets: 3,
          characters: [{
            name: 'Luke Skywalker'
          }, {
            name: 'C-3PO'
          }, {
            name: 'R2-D2'
          }, {
            name: 'Darth Vader'
          }, {
            name: 'Leia Organa'
          }, {
            name: 'Owen Lars'
          }, {
            name: 'Beru Whitesun lars'
          }, {
            name: 'R5-D4'
          }, {
            name: 'Biggs Darklighter'
          }, {
            name: 'Obi-Wan Kenobi'
          }, {
            name: 'Wilhuff Tarkin'
          }, {
            name: 'Chewbacca'
          }, {
            name: 'Han Solo'
          }, {
            name: 'Greedo'
          }, {
            name: 'Jabba Desilijic Tiure'
          }, {
            name: 'Wedge Antilles'
          }, {
            name: 'Jek Tono Porkins'
          }, {
            name: 'Raymus Antilles'
          }]
        }
      }
    });
  }));
});