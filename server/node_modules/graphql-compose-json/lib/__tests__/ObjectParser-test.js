"use strict";

var _graphqlCompose = require("graphql-compose");

var _ObjectParser = _interopRequireDefault(require("../ObjectParser"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const GraphQLFloat = _graphqlCompose.graphql.GraphQLFloat,
      GraphQLBoolean = _graphqlCompose.graphql.GraphQLBoolean;
describe('ObjectParser', () => {
  describe('getFieldConfig()', () => {
    it('number', () => {
      expect(_ObjectParser.default.getFieldConfig(6)).toBe('Float');
      expect(_ObjectParser.default.getFieldConfig(77.7)).toBe('Float');
    });
    it('string', () => {
      expect(_ObjectParser.default.getFieldConfig('test')).toBe('String');
    });
    it('boolean', () => {
      expect(_ObjectParser.default.getFieldConfig(true)).toBe('Boolean');
      expect(_ObjectParser.default.getFieldConfig(false)).toBe('Boolean');
    });
    it('null', () => {
      expect(_ObjectParser.default.getFieldConfig(null)).toBe('JSON');
    });
    describe('array', () => {
      it('of number', () => {
        expect(_ObjectParser.default.getFieldConfig([1, 2, 3])).toEqual(['Float']);
      });
      it('of string', () => {
        expect(_ObjectParser.default.getFieldConfig(['a', 'b', 'c'])).toEqual(['String']);
      });
      it('of boolean', () => {
        expect(_ObjectParser.default.getFieldConfig([false, true])).toEqual(['Boolean']);
      });
      it('of any', () => {
        expect(_ObjectParser.default.getFieldConfig([null])).toEqual(['JSON']);
      });
    });
    it('function', () => {
      const valueAsFn = () => 'abracadabra';

      const res = _ObjectParser.default.getFieldConfig(valueAsFn);

      expect(res).toBe(valueAsFn);
    });
    it('object', () => {
      const spy = jest.spyOn(_ObjectParser.default, 'createTC');
      const valueAsObj = {
        a: 123
      };

      _ObjectParser.default.getFieldConfig(valueAsObj, {
        typeName: 'ParentTypeName',
        fieldName: 'subDocument'
      });

      expect(spy).toHaveBeenCalledWith('ParentTypeName_SubDocument', valueAsObj);
    });
  });
  describe('createTC()', () => {
    it('return TypeComposer', () => {
      const tc = _ObjectParser.default.createTC('MyType', {
        a: 1
      });

      expect(tc).toBeInstanceOf(_graphqlCompose.TypeComposer);
      expect(tc.getTypeName()).toBe('MyType');
    });
    it('creates fields', () => {
      const tc = _ObjectParser.default.createTC('MyType', {
        a: 1,
        b: true
      });

      expect(tc.getFieldNames()).toEqual(['a', 'b']);
      expect(tc.getFieldType('a')).toBe(GraphQLFloat);
      expect(tc.getFieldType('b')).toBe(GraphQLBoolean);
    });
    it('match snapshot', () => {
      const PeopleTC = _ObjectParser.default.createTC('PeopleType', {
        name: 'Luke Skywalker',
        height: () => 'Int',
        mass: () => 'Int',
        hair_color: 'blond',
        skin_color: 'fair',
        eye_color: 'blue',
        birth_year: '19BBY',
        gender: 'male',
        homeworld: {
          name: 'Tatooine',
          rotation_period: '23',
          orbital_period: '304',
          terrain: 'desert',
          surface_water: '1',
          population: () => 'Int'
        },
        films: ['https://swapi.co/api/films/2/', 'https://swapi.co/api/films/6/', 'https://swapi.co/api/films/3/'],
        created: () => 'Date',
        edited: '2014-12-20T21:17:56.891000Z'
      });

      const PeopleGraphQLType = PeopleTC.getType();
      expect(PeopleGraphQLType).toMatchSnapshot();
      expect(PeopleGraphQLType.getFields()).toMatchSnapshot();
      const homeworldSubType = PeopleTC.getFieldType('homeworld');
      expect(homeworldSubType).toMatchSnapshot(); // $FlowFixMe

      expect(homeworldSubType.getFields()).toMatchSnapshot();
    });
  });
});